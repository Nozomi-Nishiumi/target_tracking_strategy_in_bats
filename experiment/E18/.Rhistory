d_g2x=d_tx[i]-k*Rx
d_g2y=d_ty[i]-k*Ry
d_g2z=d_tz[i]-k*Rz
mag_d_g2=sqrt(d_g2x^2+d_g2y^2+d_g2z^2)
if(d_c[i]>mag_d_g2){
mag_d_g1=sqrt(d_c[i]^2-mag_d_g2^2)
d_g1x=mag_d_g1/mag_R*(-Rx)
d_g1y=mag_d_g1/mag_R*(-Ry)
d_g1z=mag_d_g1/mag_R*(-Rz)
d_gx=d_g1x+d_g2x
d_gy=d_g1y+d_g2y
d_gz=d_g1z+d_g2z
}else{
d_gx=d_c[i]/mag_d_g2*d_g2x
d_gy=d_c[i]/mag_d_g2*d_g2y
d_gz=d_c[i]/mag_d_g2*d_g2z
}
mag_dc=sqrt(d_gx^2+d_gy^2+d_gz^2)
gx=c(gx,gx[i]+d_gx)
gy=c(gy,gy[i]+d_gy)
gz=c(gz,gz[i]+d_gz)
overlap_index
PNsim<-function(tgt,chaser,range){
tgt=tgt[,1:3]
chaser=chaser[,1:3]
colnames(tgt)<-c("x","y","z")
colnames(chaser)<-c("x","y","z")
d_tx=tgt$x[-1]-tgt$x[-(length(tgt$x))]
d_ty=tgt$y[-1]-tgt$y[-(length(tgt$y))]
d_tz=tgt$z[-1]-tgt$z[-(length(tgt$z))]
d_cx=chaser$x[-1]-chaser$x[-(length(chaser$x))]
d_cy=chaser$y[-1]-chaser$y[-(length(chaser$y))]
d_cz=chaser$z[-1]-chaser$z[-(length(chaser$z))]
d_c=sqrt(d_cx^2+d_cy^2+d_cz^2)
# v=mean(d_c)
# d_c=rep(v,length=length(d_c))
#g:ghost
gx=chaser$x[1:min(range)-1]
gy=chaser$y[1:min(range)-1]
gz=chaser$z[1:min(range)-1]
for(i in range){
j=i-1 #one step before
Rx=gx[j]-tgt$x[j]
Ry=gy[j]-tgt$y[j]
Rz=gz[j]-tgt$z[j]
mag_R=sqrt(Rx^2+Ry^2+Rz^2)
k=(d_tx[j]*Rx+d_ty[j]*Ry+d_tz[j]*Rz)/(mag_R^2)
d_g2x=d_tx[j]-k*Rx
d_g2y=d_ty[j]-k*Ry
d_g2z=d_tz[j]-k*Rz
mag_d_g2=sqrt(d_g2x^2+d_g2y^2+d_g2z^2)
if(d_c[j]>mag_d_g2){
mag_d_g1=sqrt(d_c[j]^2-mag_d_g2^2)
d_g1x=mag_d_g1/mag_R*(-Rx)
d_g1y=mag_d_g1/mag_R*(-Ry)
d_g1z=mag_d_g1/mag_R*(-Rz)
d_gx=d_g1x+d_g2x
d_gy=d_g1y+d_g2y
d_gz=d_g1z+d_g2z
}else{
d_gx=d_c[j]/mag_d_g2*d_g2x
d_gy=d_c[j]/mag_d_g2*d_g2y
d_gz=d_c[j]/mag_d_g2*d_g2z
}
mag_dc=sqrt(d_gx^2+d_gy^2+d_gz^2)
gx=c(gx,gx[j]+d_gx)
gy=c(gy,gy[j]+d_gy)
gz=c(gz,gz[j]+d_gz)
}
result=cbind(gx,gy,gz)
return(as.data.frame(result))
}
simPN=PNsim(simTGT,simCHASER,3:length(simTGT))
PNsim<-function(tgt,chaser,start,end){
tgt=tgt[,1:3]
chaser=chaser[,1:3]
colnames(tgt)<-c("x","y","z")
colnames(chaser)<-c("x","y","z")
d_tx=tgt$x[-1]-tgt$x[-(length(tgt$x))]
d_ty=tgt$y[-1]-tgt$y[-(length(tgt$y))]
d_tz=tgt$z[-1]-tgt$z[-(length(tgt$z))]
d_cx=chaser$x[-1]-chaser$x[-(length(chaser$x))]
d_cy=chaser$y[-1]-chaser$y[-(length(chaser$y))]
d_cz=chaser$z[-1]-chaser$z[-(length(chaser$z))]
d_c=sqrt(d_cx^2+d_cy^2+d_cz^2)
# v=mean(d_c)
# d_c=rep(v,length=length(d_c))
#g:ghost
gx=chaser$x[1:start-1]
gy=chaser$y[1:start-1]
gz=chaser$z[1:start-1]
for(i in start:end){
j=i-1 #one step before
Rx=gx[j]-tgt$x[j]
Ry=gy[j]-tgt$y[j]
Rz=gz[j]-tgt$z[j]
mag_R=sqrt(Rx^2+Ry^2+Rz^2)
k=(d_tx[j]*Rx+d_ty[j]*Ry+d_tz[j]*Rz)/(mag_R^2)
d_g2x=d_tx[j]-k*Rx
d_g2y=d_ty[j]-k*Ry
d_g2z=d_tz[j]-k*Rz
mag_d_g2=sqrt(d_g2x^2+d_g2y^2+d_g2z^2)
if(d_c[j]>mag_d_g2){
mag_d_g1=sqrt(d_c[j]^2-mag_d_g2^2)
d_g1x=mag_d_g1/mag_R*(-Rx)
d_g1y=mag_d_g1/mag_R*(-Ry)
d_g1z=mag_d_g1/mag_R*(-Rz)
d_gx=d_g1x+d_g2x
d_gy=d_g1y+d_g2y
d_gz=d_g1z+d_g2z
}else{
d_gx=d_c[j]/mag_d_g2*d_g2x
d_gy=d_c[j]/mag_d_g2*d_g2y
d_gz=d_c[j]/mag_d_g2*d_g2z
}
mag_dc=sqrt(d_gx^2+d_gy^2+d_gz^2)
gx=c(gx,gx[j]+d_gx)
gy=c(gy,gy[j]+d_gy)
gz=c(gz,gz[j]+d_gz)
}
result=cbind(gx,gy,gz)
return(as.data.frame(result))
}
simPN=PNsim(simTGT,simCHASER,3,length(simTGT))
simPN=PNsim(objects[[2]],objects[[1]],min(overlap_index)+3)
simPN=PNsim(objects[[2]],objects[[1]],min(overlap_index)+3,max(overlap_index))
simPN
PNsim<-function(tgt,chaser,start,end=length(tgt)){
tgt=tgt[,1:3]
chaser=chaser[,1:3]
colnames(tgt)<-c("x","y","z")
colnames(chaser)<-c("x","y","z")
d_tx=tgt$x[-1]-tgt$x[-(length(tgt$x))]
d_ty=tgt$y[-1]-tgt$y[-(length(tgt$y))]
d_tz=tgt$z[-1]-tgt$z[-(length(tgt$z))]
d_cx=chaser$x[-1]-chaser$x[-(length(chaser$x))]
d_cy=chaser$y[-1]-chaser$y[-(length(chaser$y))]
d_cz=chaser$z[-1]-chaser$z[-(length(chaser$z))]
d_c=sqrt(d_cx^2+d_cy^2+d_cz^2)
# v=mean(d_c)
# d_c=rep(v,length=length(d_c))
#g:ghost
gx=chaser$x[1:start-1]
gy=chaser$y[1:start-1]
gz=chaser$z[1:start-1]
for(i in start:end){
j=i-1 #one step before
Rx=gx[j]-tgt$x[j]
Ry=gy[j]-tgt$y[j]
Rz=gz[j]-tgt$z[j]
mag_R=sqrt(Rx^2+Ry^2+Rz^2)
k=(d_tx[j]*Rx+d_ty[j]*Ry+d_tz[j]*Rz)/(mag_R^2)
d_g2x=d_tx[j]-k*Rx
d_g2y=d_ty[j]-k*Ry
d_g2z=d_tz[j]-k*Rz
mag_d_g2=sqrt(d_g2x^2+d_g2y^2+d_g2z^2)
if(d_c[j]>mag_d_g2){
mag_d_g1=sqrt(d_c[j]^2-mag_d_g2^2)
d_g1x=mag_d_g1/mag_R*(-Rx)
d_g1y=mag_d_g1/mag_R*(-Ry)
d_g1z=mag_d_g1/mag_R*(-Rz)
d_gx=d_g1x+d_g2x
d_gy=d_g1y+d_g2y
d_gz=d_g1z+d_g2z
}else{
d_gx=d_c[j]/mag_d_g2*d_g2x
d_gy=d_c[j]/mag_d_g2*d_g2y
d_gz=d_c[j]/mag_d_g2*d_g2z
}
mag_dc=sqrt(d_gx^2+d_gy^2+d_gz^2)
gx=c(gx,gx[j]+d_gx)
gy=c(gy,gy[j]+d_gy)
gz=c(gz,gz[j]+d_gz)
}
result=cbind(gx,gy,gz)
return(as.data.frame(result))
}
simPN=PNsim(simTGT,simCHASER,3)
PNsim<-function(tgt,chaser,start,end=nrow(tgt)){
tgt=tgt[,1:3]
chaser=chaser[,1:3]
colnames(tgt)<-c("x","y","z")
colnames(chaser)<-c("x","y","z")
d_tx=tgt$x[-1]-tgt$x[-(length(tgt$x))]
d_ty=tgt$y[-1]-tgt$y[-(length(tgt$y))]
d_tz=tgt$z[-1]-tgt$z[-(length(tgt$z))]
d_cx=chaser$x[-1]-chaser$x[-(length(chaser$x))]
d_cy=chaser$y[-1]-chaser$y[-(length(chaser$y))]
d_cz=chaser$z[-1]-chaser$z[-(length(chaser$z))]
d_c=sqrt(d_cx^2+d_cy^2+d_cz^2)
# v=mean(d_c)
# d_c=rep(v,length=length(d_c))
#g:ghost
gx=chaser$x[1:start-1]
gy=chaser$y[1:start-1]
gz=chaser$z[1:start-1]
for(i in start:end){
j=i-1 #one step before
Rx=gx[j]-tgt$x[j]
Ry=gy[j]-tgt$y[j]
Rz=gz[j]-tgt$z[j]
mag_R=sqrt(Rx^2+Ry^2+Rz^2)
k=(d_tx[j]*Rx+d_ty[j]*Ry+d_tz[j]*Rz)/(mag_R^2)
d_g2x=d_tx[j]-k*Rx
d_g2y=d_ty[j]-k*Ry
d_g2z=d_tz[j]-k*Rz
mag_d_g2=sqrt(d_g2x^2+d_g2y^2+d_g2z^2)
if(d_c[j]>mag_d_g2){
mag_d_g1=sqrt(d_c[j]^2-mag_d_g2^2)
d_g1x=mag_d_g1/mag_R*(-Rx)
d_g1y=mag_d_g1/mag_R*(-Ry)
d_g1z=mag_d_g1/mag_R*(-Rz)
d_gx=d_g1x+d_g2x
d_gy=d_g1y+d_g2y
d_gz=d_g1z+d_g2z
}else{
d_gx=d_c[j]/mag_d_g2*d_g2x
d_gy=d_c[j]/mag_d_g2*d_g2y
d_gz=d_c[j]/mag_d_g2*d_g2z
}
mag_dc=sqrt(d_gx^2+d_gy^2+d_gz^2)
gx=c(gx,gx[j]+d_gx)
gy=c(gy,gy[j]+d_gy)
gz=c(gz,gz[j]+d_gz)
}
result=cbind(gx,gy,gz)
return(as.data.frame(result))
}
source('~/Dropbox/解析プログラム/dragonfly_3Danalysis.R', echo=TRUE)
source('~/Dropbox/解析プログラム/dragonfly_3Danalysis.R', echo=TRUE)
source('~/Dropbox/解析プログラム/dragonfly_3Danalysis.R', echo=TRUE)
traceback()
a
tgt=simTGT
chaser=simCHASER
N=3
start=3
end=nrow(tgt)
end
tgt=tgt[,1:3]
start
tgt=tgt[,1:3]
chaser=chaser[,1:3]
colnames(tgt)<-c("x","y","z")
colnames(chaser)<-c("x","y","z")
Vt=(tgt[-1,]-tgt[-nrow(tgt),])
Vc=(chaser[-1,]-chaser[-nrow(chaser),])
# Vt=tgt[,4:6]
# Vc=chaser[,4:6]
Vt_mag=sqrt(Vt[,1]^2+Vt[,2]^2+Vt[,3]^2)
Vc_mag=sqrt(Vc[,1]^2+Vc[,2]^2+Vc[,3]^2)
Xg=chaser[1:start,]
Vg=Vc[1:start,]
result=numeric()
result_ag=data.frame()
result_ag2=data.frame()
for(i in start:end-1){
Vt[i,]= tgt[i,]-tgt[i-1,]
Vg[i,]=Xg[i,]-Xg[i-1,]
R=tgt[i,]-Xg[i,]
R_prev=tgt[i-1,]-Xg[i-1,]
R_prev2=tgt[i-2,]-Xg[i-2,]
Vr=Vt[i,]-Vg[i,]
W=cross(as.matrix(R),as.matrix(Vr))/(R[1,1]^2+R[1,2]^2+R[1,3]^2)
W_mag=sqrt(W[1]^2+W[2]^2+W[3]^2)
n2_mag=90-angle_2vec(W,R_prev2)
Ag2=N*W/W_mag*n2_mag^3*3000000
colnames(Ag2)=c("x","y","z")
# d_angle=angle_2vec(R,R_prev)
# n=cross(as.numeric(R_prev),as.numeric(R))
#
# n/norm(n,"2")*d_angle/180*pi
# W/norm(W,"2")
# W=matrix(n/norm(n,"2")*d_angle/180*pi, ncol=3)
Ag=N*as.data.frame(cross(W,as.matrix(Vg[i,])))
ang=angle_2vec(Vg[i,]+Ag,Vg[i,]+Ag+Ag2)
result=c(result,ang)
result_ag=rbind(result_ag,Ag)
result_ag2=rbind(result_ag2,Ag+Ag2)
colnames(Ag)=c("x","y","z")
nextVg=Vg[i,]+Ag+Ag2
nextVg=Vc_mag[i]/sqrt(nextVg[1,1]^2+nextVg[1,2]^2+nextVg[1,3]^2)*nextVg
nextXg=Xg[i,]+nextVg
Vg=rbind(Vg,nextVg)
Xg=rbind(Xg,nextXg)
}
i
start
start:end-1
source('~/Dropbox/解析プログラム/dragonfly_3Danalysis.R', echo=TRUE)
source('~/Dropbox/解析プログラム/dragonfly_3Danalysis.R', echo=TRUE)
traceback()
simOPT=OPTsim(objects[[2]],objects[[1]],min(overlap_index)+3,max(overlap_index))
tgt=objects[[2]]
chaser=objects[[1]]
start=min(overlap_index)+3
end=max(overlap_index)
tgt=tgt[,1:3]
chaser=chaser[,1:3]
colnames(tgt)<-c("x","y","z")
colnames(chaser)<-c("x","y","z")
d_cx=chaser$x[-1]-chaser$x[-(length(chaser$x))]
d_cy=chaser$y[-1]-chaser$y[-(length(chaser$y))]
d_cz=chaser$z[-1]-chaser$z[-(length(chaser$z))]
d_c=sqrt(d_cx^2+d_cy^2+d_cz^2)
#g:ghost
gx=chaser$x[1:start]
gy=chaser$y[1:start]
gz=chaser$z[1:start]
dist=as.data.frame(t(t(tgt[start:nrow(tgt),]) - as.vector(t(chaser[start,]))))
distance=sqrt(dist$x^2+dist$y^2+dist$z^2)
displacement=c(0)
for(i in start:(end-1)){
displacement=c(displacement,displacement[length(displacement)]+d_c[i])
}
diff=distance-displacement
distance
displacement
dist=as.data.frame(t(t(tgt[start:(end-1),]) - as.vector(t(chaser[start,]))))
distance=sqrt(dist$x^2+dist$y^2+dist$z^2)
displacement=c(0)
for(i in start:(end-1)){
displacement=c(displacement,displacement[length(displacement)]+d_c[i])
}
diff=distance-displacement
distance
displacement
dist=as.data.frame(t(t(tgt[start:end,]) - as.vector(t(chaser[start,]))))
distance=sqrt(dist$x^2+dist$y^2+dist$z^2)
displacement=c(0)
for(i in start:(end-1)){
displacement=c(displacement,displacement[length(displacement)]+d_c[i])
}
diff=distance-displacement
distance
displacement
source('~/Dropbox/解析プログラム/dragonfly_3Danalysis.R', echo=TRUE)
source('~/Dropbox/解析プログラム/dragonfly_3Danalysis.R', echo=TRUE)
traceback()
source('~/Dropbox/解析プログラム/dragonfly_3Danalysis.R', echo=TRUE)
traceback()
simOPT
getOption("max.print")=1000
options(max.print=1000)
simOPT
options(max.print=10000)
simOPT
min(overlap_index)+3
traceback()
# drawScene(objects)
drawScene(c(objects,list(simPN),list(simOPT)))
source('~/Dropbox/解析プログラム/dragonfly_3Danalysis.R', echo=TRUE)
data=c(objects,list(simPN),list(simOPT))
fov=60
num=length(data)
num
range<-data.frame(matrix(rep(NA, length(2)), ncol=3))[,numeric(0)]
for(i in 1:3){
maxvalue=numeric()
minvalue=numeric()
for(j in 1:num){
maxvalue=c(maxvalue,max(data[[j]][,i]))
minvalue=c(minvalue,min(data[[j]][,i]))
}
r=c(min(minvalue)-100,max(maxvalue)+100)
range=cbind(range,r)
}
range
max(data[[1]])
max(data[[2]])
max(data[[2]][,1])
data[[2]][,1]
range<-data.frame(matrix(rep(NA, length(2)), ncol=3))[,numeric(0)]
for(i in 1:3){
maxvalue=numeric()
minvalue=numeric()
for(j in 1:num){
maxvalue=c(maxvalue,max(na.omit(data[[j]][,i])))
minvalue=c(minvalue,min(na.omit(data[[j]][,i])))
}
r=c(min(minvalue)-100,max(maxvalue)+100)
range=cbind(range,r)
}
range
diff=numeric()
for(i in 1:3){
diff=c(diff,range[2,i]-range[1,i])
}
diff
ratio=c(diff[1]/max(diff),diff[2]/max(diff),diff[3]/max(diff))
rgl.clear()
plot3d(x=c(0),y=c(0),z=c(0),type="n",xlim=range$x,ylim=range$y,zlim=range$z)
par3d(windowRect = c(0, 0, 700, 700))
aspect3d(ratio)
ext=seq(min(TIME), max(TIME), by = 0.1)
ext_index <- sapply(ext, function(z)which.min(abs(z - TIME)))
for(i in 1:num){
lines3d(data[[i]][,1],data[[i]][,2],data[[i]][,3],col=hsv(i/num,1,0.5))
text3d(data[[i]][ext_index,1],data[[i]][ext_index,2],data[[i]][ext_index,3]+50, texts=ext, col=hsv(i/num,1,0.5),alpha=0.2)
}
source('~/Dropbox/解析プログラム/dragonfly_3Danalysis.R', echo=TRUE)
source('~/Dropbox/解析プログラム/dragonfly_3Danalysis.R', echo=TRUE)
debugSource('~/Dropbox/コウモリ/捕食行動関係（西海さん）/松田君/解析プログラム/コウモリ解析_論文用.R', echo=TRUE)
debugSource('~/Dropbox/コウモリ/捕食行動関係（西海さん）/松田君/解析プログラム/コウモリ解析_論文用.R', echo=TRUE)
debugSource('~/Dropbox/コウモリ/捕食行動関係（西海さん）/松田君/解析プログラム/コウモリ解析_論文用.R', echo=TRUE)
source('~/Dropbox/コウモリ/捕食行動関係（西海さん）/松田君/解析プログラム/コウモリ解析_論文用.R', echo=TRUE)
source('~/Dropbox/コウモリ/捕食行動関係（西海さん）/松田君/解析プログラム/コウモリ解析_論文用.R', echo=TRUE)
getwd()
setwd("..")
getwd()
dir.create("results")
setwd("./results")
indexHead=numeric()
for(ind in 1:max(GLMM_dataset$ExpIndex)){
indexHead=c(indexHead,which(GLMM_dataset$ExpIndex==ind)[1])
}
GLMM_dataset_headoff=GLMM_dataset
GLMM_dataset_headoff[indexHead,]=NA
pulse_tgtshift=ggplot_drawGLMM(GLMM_dataset$P2Tl_Tc_REF.LeadAngle,GLMM_dataset$P2Tl_Tc_OBJ.LeadAngle,GLMM_dataset$ID,
3,c(-1,16),c(-60,60),
"Actual Lead Angle","Pulse Lead Angle","GLMM_actual_lead.png",2,1)
pulse_tgtshift=ggplot_drawGLMM(GLMM_dataset$P2Tlprev_Tc_REF.LeadAngle,GLMM_dataset$P2Tlprev_Tc_OBJ.LeadAngle,GLMM_dataset$ID,
3,c(-1,16),c(-60,60),
"Actual Lead Angle","Pulse Lead Angle","GLMM_actual_lead.png",2,1)
pulse_tgtshift=ggplot_drawGLMM(GLMM_dataset$P2Tl_Tc_REF.LeadAngle,GLMM_dataset$P2Tl_Tc_OBJ.LeadAngle,GLMM_dataset$ID,
3,c(-1,16),c(-60,60),
"Actual Lead Angle","Pulse Lead Angle","GLMM_actual_lead.png",2,1)
pulse_tgtshift=ggplot_drawGLMM(GLMM_dataset$P2Tlprev_Tc_REF.LeadAngle,GLMM_dataset$P2Tl_Tc_REF.LeadAngle,GLMM_dataset$ID,
3,c(-1,16),c(-60,60),
"Actual Lead Angle","Pulse Lead Angle","GLMM_actual_lead.png",2,1)
source('~/Dropbox/コウモリ/捕食行動関係（西海さん）/松田君/解析プログラム/コウモリ解析_論文用.R', echo=TRUE)
setwd("..")
getwd()
dir.create("results")
setwd("./results")
indexHead=numeric()
for(ind in 1:max(GLMM_dataset$ExpIndex)){
indexHead=c(indexHead,which(GLMM_dataset$ExpIndex==ind)[1])
}
GLMM_dataset_headoff=GLMM_dataset
GLMM_dataset_headoff[indexHead,]=NA
pulse_tgtshift=ggplot_drawGLMM(GLMM_dataset$P2Tlprev_Tc_REF.LeadAngle,GLMM_dataset$P2Tlprev_Tc_OBJ.LeadAngle,GLMM_dataset$ID,
3,c(-1,16),c(-60,60),
"Actual Lead Angle","Pulse Lead Angle","GLMM_actual_lead.png",2,1)
test_for_yx=ggplot_drawGLMM(GLMM_dataset$P2Tl_Tc_REF.LeadAngle,GLMM_dataset$P2Tl_Tc_OBJ.LeadAngle-GLMM_dataset$P2Tl_Tc_REF.LeadAngle,GLMM_dataset$ID,
3,c(-1,16),c(-60,60),
"Actual Lead Angle","Pulse Lead Angle","GLMM_lead_xy.png",2,1)
test_for_yx=ggplot_drawGLMM(GLMM_dataset$P2Tlprev_Tc_REF.LeadAngle,GLMM_dataset$P2Tlprev_Tc_OBJ.LeadAngle-GLMM_dataset$P2Tlprev_Tc_REF.LeadAngle,GLMM_dataset$ID,
3,c(-1,16),c(-60,60),
"Actual Lead Angle","Pulse Lead Angle","GLMM_lead_xy.png",2,1)
pulse_tgtshift_side=ggplot_drawGLMM(GLMM_dataset$P2Tlprev_Tc_REF.SideAngle,GLMM_dataset$P2Tlprev_Tc_OBJ.SideAngle,GLMM_dataset$ID,
3,c(-1,16),c(-60,60),
"Actual Lead Angle","Pulse Side Angle","GLMM_actual_side.png",1,1)
pulse_tgtshift_side=ggplot_drawGLMM(GLMM_dataset$P2Tlprev_Tc_REF.LeadAngle,GLMM_dataset$P2Tlprev_Tc_OBJ.SideAngle,GLMM_dataset$ID,
3,c(-1,16),c(-60,60),
"Actual Lead Angle","Pulse Side Angle","GLMM_actual_side.png",1,1)
test_for_y0=ggplot_drawGLMM(GLMM_dataset$P2Tlprev_Tc_REF.LeadAngle,GLMM_dataset$P2Tlprev_Tc_OBJ.SideAngle-GLMM_dataset$P2Tlprev_Tc_REF.SideAngle,GLMM_dataset$ID,
3,c(-1,16),c(-60,60),
"Actual Lead Angle","Pulse Side Angle","GLMM_side_y0.png",2,1)
source('~/Dropbox/コウモリ/捕食行動関係（西海さん）/松田君/解析プログラム/コウモリ解析_論文用.R', echo=TRUE)
setwd("..")
getwd()
dir.create("results")
setwd("./results")
indexHead=numeric()
for(ind in 1:max(GLMM_dataset$ExpIndex)){
indexHead=c(indexHead,which(GLMM_dataset$ExpIndex==ind)[1])
}
GLMM_dataset_headoff=GLMM_dataset
GLMM_dataset_headoff[indexHead,]=NA
pulse_tgtshift=ggplot_drawGLMM(GLMM_dataset$P2Tl_Tc_REF.LeadAngle,GLMM_dataset$P2Tl_Tc_OBJ.LeadAngle,GLMM_dataset$ID,
3,c(-1,16),c(-60,60),
"Actual Lead Angle","Pulse Lead Angle","GLMM_actual_lead.png",2,1)
test_for_yx=ggplot_drawGLMM(GLMM_dataset$P2Tl_Tc_REF.LeadAngle,GLMM_dataset$P2Tl_Tc_OBJ.LeadAngle-GLMM_dataset$P2Tl_Tc_REF.LeadAngle,GLMM_dataset$ID,
3,c(-1,16),c(-60,60),
"Actual Lead Angle","Pulse Lead Angle","GLMM_lead_xy.png",2,1)
pulse_tgtshift_side=ggplot_drawGLMM(GLMM_dataset$P2Tl_Tc_REF.LeadAngle,GLMM_dataset$P2Tl_Tc_OBJ.SideAngle,GLMM_dataset$ID,
3,c(-1,16),c(-60,60),
"Actual Lead Angle","Pulse Side Angle","GLMM_actual_side.png",1,1)
test_for_y0=ggplot_drawGLMM(GLMM_dataset$P2Tl_Tc_REF.LeadAngle,GLMM_dataset$P2Tl_Tc_OBJ.SideAngle-GLMM_dataset$P2Tl_Tc_REF.SideAngle,GLMM_dataset$ID,
3,c(-1,16),c(-60,60),
"Actual Lead Angle","Pulse Side Angle","GLMM_side_y0.png",2,1)
source('~/Dropbox/コウモリ/捕食行動関係（西海さん）/松田君/論文原稿/submission/Dataset/analysis/sourcecode.R', echo=TRUE)
fig3c=ggplot_drawGLMM(AllSessions$Tl_Tc.LeadAngle,AllSessions$Tl_P.LeadAngle,AllSessions$ID,
3,c(-1,16),c(-60,60),
"TGT direction shift","Pulse Lead Angle","fig3c.png",2,1)
get.bestmodel.GLMM(AllSessions$Tl_Tc.LeadAngle,AllSessions$Tl_P.LeadAngle,AllSessions$ID,
3)
#comparing accuracies of two prediction models (paired test considering ID)
Accuracy_comparison(AllSessions$P_A.V,AllSessions$P_L.V, AllSessions$ID)
Accuracy_comparison<-function(a,b,id){
dataset=data.frame(a,b,id)
dataset_omit<-as.data.frame(dataset[is.finite(rowSums(dataset)),])
colnames(dataset_omit)=c("AV","LV","ID")
Dev<-c(dataset_omit$AV,dataset_omit$LV)
model_type<-c(rep("AV",length(dataset_omit$AV)), rep("LV",length(dataset_omit$LV)))
emissionIndex<-c(as.factor(1:length(dataset_omit$AV)), as.factor(1:length(dataset_omit$LV)))
ID<-c(dataset_omit$ID,dataset_omit$ID)
ER_data<-data.frame(Dev= Dev, model_type=model_type, emissionIndex=emissionIndex, ID=ID)
(lmer(Dev ~ model_type + (1|emissionIndex) + (1|ID), data= ER_data)->model) #emissionIndexはIDにネストされてるので...
(lmer(Dev ~ 1 + (1|emissionIndex) + (1|ID), data= ER_data)->nullmodel) #emissionIndexはIDにネストされてるので...
print(summary(model))
lrt=anova(model,nullmodel,test = "Chisq")
print(lrt)
#manual calc. for wald test
coeff=summary(model)$coefficients
diff=coeff[2,1]/(coeff[1,1]+coeff[2,1])
wald=1-pchisq((coeff[2,1]/coeff[2,2])^2,1)
print(wald)
}
#comparing accuracies of two prediction models (paired test considering ID)
Accuracy_comparison(AllSessions$P_A.V,AllSessions$P_L.V, AllSessions$ID)
